diff -r -u sudo-1.8.22-orig/plugins/sudoers/parse.c sudo-1.8.22/plugins/sudoers/parse.c
--- sudo-1.8.22-orig/plugins/sudoers/parse.c	2018-01-15 18:31:32.000000000 +0100
+++ sudo-1.8.22/plugins/sudoers/parse.c	2018-08-22 15:50:36.060355947 +0200
@@ -32,6 +32,8 @@
 #include <grp.h>
 #include <pwd.h>
 #include <time.h>
+#include <dlfcn.h>
+#include <libaudit.h>
 
 #include "sudoers.h"
 #include "parse.h"
@@ -147,6 +149,8 @@
 sudo_file_lookup(struct sudo_nss *nss, int validated, int pwflag)
 {
     int match, host_match, runas_match, cmnd_match, timeout;
+    int trytacplus = 1;
+    struct passwd tacpluspw, *pw;
     struct cmndspec *cs;
     struct cmndtag *tags = NULL;
     struct privilege *priv;
@@ -158,6 +162,8 @@
     if (nss->handle == NULL)
 	debug_return_int(validated);
 
+    pw = sudo_user.pw;
+
     /*
      * Only check the actual command if pwflag is not set.
      * It is set for the "validate", "list" and "kill" pseudo-commands.
@@ -176,7 +182,7 @@
 	CLR(validated, FLAG_NO_HOST);
 	match = DENY;
 	TAILQ_FOREACH(us, &userspecs, entries) {
-	    if (userlist_matches(sudo_user.pw, &us->users) != ALLOW)
+	    if (userlist_matches(pw, &us->users) != ALLOW)
 		continue;
 	    TAILQ_FOREACH(priv, &us->privileges, entries) {
 		if (hostlist_matches(sudo_user.pw, &priv->hostlist) != ALLOW)
@@ -215,8 +221,9 @@
 
     time(&now);
     match = UNSPEC;
+ relook:
     TAILQ_FOREACH_REVERSE(us, &userspecs, userspec_list, entries) {
-	if (userlist_matches(sudo_user.pw, &us->users) != ALLOW)
+	if (userlist_matches(pw, &us->users) != ALLOW)
 	    continue;
 	CLR(validated, FLAG_NO_USER);
 	TAILQ_FOREACH_REVERSE(priv, &us->privileges, privilege_list, entries) {
@@ -358,6 +365,47 @@
 		}
 	    }
 	}
+    } else if  (match == UNSPEC && trytacplus) {
+       uid_t auid = audit_getloginuid();
+
+       trytacplus = 0;
+
+       /*
+        * Check if a mapped TACACS user is trying to sudo. If so, we want
+        * to use their original password, not the local mapped user's passwd
+        * dlopen and dlsym so sudo works without the tacacs client software
+        * being installed
+        */
+       if (auid && auid != -1) {
+           static char mappednm[256];
+           static void *dlh;
+           static char *(*maplookup)(uid_t uid, uid_t auid,
+                                     unsigned session, char *mappedname,
+                                     size_t maplen, uint16_t *flags) = NULL;
+           unsigned (*map_session)(void) = NULL;
+           unsigned session;
+           char *nm = NULL;
+           if (!dlh) {
+               dlh = dlopen("libtacplus_map.so.1", RTLD_NOW);
+               if (dlh) {
+                   maplookup = dlsym(dlh, "lookup_mapuid");
+                   map_session = dlsym(dlh, "map_get_sessionid");
+               }
+           }
+           if (maplookup && map_session) {
+               session = map_session();
+               if (session && session != ~0) {
+                 nm = maplookup(pw->pw_uid, auid, session,
+                                mappednm, sizeof mappednm, NULL);
+               }
+               if (nm) {
+                   tacpluspw = *pw;
+                   pw = &tacpluspw;
+                   pw->pw_name = mappednm;
+                   goto relook;
+               }
+           }
+       }
     }
 #if defined(HAVE_SELINUX) || defined(HAVE_PRIV_SET)
 done:
